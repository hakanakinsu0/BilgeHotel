// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Dal.ContextClasses;

#nullable disable

namespace Project.Dal.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20250218202011_Mig1")]
    partial class Mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "3708abff-df03-405b-b7bc-cccbef7871b9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "58c0c24b-df43-4477-952c-979f0422645e",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project.Entities.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ActivationCode = new Guid("00000000-0000-0000-0000-000000000000"),
                            ConcurrencyStamp = "393880ca-680b-4bc8-8040-766a661246ea",
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 562, DateTimeKind.Local).AddTicks(4262),
                            Email = "bilgehotel@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BILGEHOTEL@EMAIL.COM",
                            NormalizedUserName = "BILGEHOTEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEN9a/NDpgywVN7Pe+UpUMN2ByMyjhdrD50DQDajM2kQ1LRVj2efaRUK0F+lemn2EsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a80e6874-afa0-4f51-b723-1f35965628e5",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "bilgehotel"
                        });
                });

            modelBuilder.Entity("Project.Entities.Models.AppUserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique()
                        .HasFilter("[AppUserId] IS NOT NULL");

                    b.ToTable("AppUserProfiles");
                });

            modelBuilder.Entity("Project.Entities.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Project.Entities.Models.CustomerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerDetails");
                });

            modelBuilder.Entity("Project.Entities.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(7391),
                            FirstName = "Buyraç",
                            LastName = "Çörekçi",
                            Position = "Resepsiyonist",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(7777),
                            FirstName = "Akata",
                            LastName = "Evliyaoğlu",
                            Position = "Resepsiyonist",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(7886),
                            FirstName = "Çolman",
                            LastName = "Küçükler",
                            Position = "Resepsiyonist",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(7969),
                            FirstName = "Apak",
                            LastName = "Egeli",
                            Position = "Resepsiyonist",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8025),
                            FirstName = "Ekim",
                            LastName = "Kunt",
                            Position = "Resepsiyonist",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8126),
                            FirstName = "Bongul",
                            LastName = "Kaplangı",
                            Position = "Resepsiyonist",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8241),
                            FirstName = "Aladağ",
                            LastName = "Kocabıyık",
                            Position = "Resepsiyonist",
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8327),
                            FirstName = "Büdüstudun",
                            LastName = "Aşıkoğlu",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8382),
                            FirstName = "Boylakutlutarkan",
                            LastName = "Ekici",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8473),
                            FirstName = "Baştar",
                            LastName = "Sarıoğlu",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8568),
                            FirstName = "Ala",
                            LastName = "Çetiner",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8655),
                            FirstName = "Kançı",
                            LastName = "Topaloğlu",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8711),
                            FirstName = "Barçadoğdu",
                            LastName = "Taşlı",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8794),
                            FirstName = "Azıl",
                            LastName = "Balaban",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8864),
                            FirstName = "Alpkara",
                            LastName = "Tazegül",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8919),
                            FirstName = "Besentegin",
                            LastName = "Alnıaçık",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9014),
                            FirstName = "Bengü",
                            LastName = "Küçükler",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9113),
                            FirstName = "Beğdilli",
                            LastName = "Yetkiner",
                            Position = "Temizlik Görevlisi",
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9197),
                            FirstName = "Ayas",
                            LastName = "Alpuğan",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9246),
                            FirstName = "Bağaalp",
                            LastName = "Erkekli",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9336),
                            FirstName = "İlbilge",
                            LastName = "Uca",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9418),
                            FirstName = "Amaç",
                            LastName = "Koç",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9506),
                            FirstName = "Bermek",
                            LastName = "Aykaç",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9561),
                            FirstName = "Çağlayan",
                            LastName = "Çörekçi",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9642),
                            FirstName = "Bağaturçigşi",
                            LastName = "Eronat",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9717),
                            FirstName = "Beğtegin",
                            LastName = "Özbir",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9805),
                            FirstName = "Buyruç",
                            LastName = "Dalkıran",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9870),
                            FirstName = "Alakurt",
                            LastName = "Orbay",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9969),
                            FirstName = "Bügdüzemen",
                            LastName = "Yalçın",
                            Position = "Aşçı",
                            Status = 1
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(56),
                            FirstName = "Bağış",
                            LastName = "Velioğlu",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(140),
                            FirstName = "Bağaturgerey",
                            LastName = "Akbulut",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(192),
                            FirstName = "Baltır",
                            LastName = "Yalçın",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(279),
                            FirstName = "Aprançur",
                            LastName = "Aclan",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(377),
                            FirstName = "Büre",
                            LastName = "Beşerler",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(462),
                            FirstName = "Baturalp",
                            LastName = "Eliçin",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(516),
                            FirstName = "Isık",
                            LastName = "Yeşilkaya",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(585),
                            FirstName = "Esin",
                            LastName = "Tunaboylu",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(671),
                            FirstName = "İldike",
                            LastName = "Sözeri",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(762),
                            FirstName = "Kançı",
                            LastName = "Öztonga",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(815),
                            FirstName = "Egemen",
                            LastName = "Topçuoğlu",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(897),
                            FirstName = "Bilgetonyukuk",
                            LastName = "Karaer",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(978),
                            FirstName = "Baybora",
                            LastName = "Tekand",
                            Position = "Garson",
                            Status = 1
                        },
                        new
                        {
                            Id = 43,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(1067),
                            FirstName = "Erdenikatun",
                            LastName = "Doğan ",
                            Position = "Elektrikçi",
                            Status = 1
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(1118),
                            FirstName = "Karaça",
                            LastName = "Arslanoğlu",
                            Position = "IT Sorumlusu",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.Entities.Models.EmployeeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Güven Yaka Sokak 64a, Ardahan, Kazakistan",
                            BirthDate = new DateTime(1981, 11, 24, 4, 12, 35, 761, DateTimeKind.Local).AddTicks(4795),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(7761),
                            EmployeeId = 1,
                            HireDate = new DateTime(2018, 10, 7, 21, 22, 42, 326, DateTimeKind.Local).AddTicks(433),
                            PhoneNumber = "+90-297-309-5-297",
                            Salary = 34062.82m,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Dağınık Evler Sokak 48b, Gümüşhane, Nikaragua",
                            BirthDate = new DateTime(2002, 10, 11, 11, 59, 7, 731, DateTimeKind.Local).AddTicks(7068),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(7877),
                            EmployeeId = 2,
                            HireDate = new DateTime(2020, 3, 5, 17, 17, 46, 912, DateTimeKind.Local).AddTicks(9104),
                            PhoneNumber = "+90-033-818-41-15",
                            Salary = 18727.48m,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kocatepe Caddesi 54, Sakarya, Türkmenistan",
                            BirthDate = new DateTime(1983, 2, 13, 20, 44, 12, 728, DateTimeKind.Local).AddTicks(2127),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(7961),
                            EmployeeId = 3,
                            HireDate = new DateTime(2020, 10, 29, 1, 26, 52, 58, DateTimeKind.Local).AddTicks(3873),
                            PhoneNumber = "+90-836-622-8-271",
                            Salary = 21618.27m,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Address = "İbn-i Sina Sokak 46c, Bartın, Panama",
                            BirthDate = new DateTime(1980, 4, 16, 11, 20, 19, 993, DateTimeKind.Local).AddTicks(2962),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8020),
                            EmployeeId = 4,
                            HireDate = new DateTime(2016, 10, 28, 1, 32, 52, 879, DateTimeKind.Local).AddTicks(3013),
                            PhoneNumber = "+90-277-961-4-710",
                            Salary = 48832.69m,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Address = "Ergenekon Sokak   2, Kırklareli, Kamboçya",
                            BirthDate = new DateTime(1981, 7, 27, 18, 55, 52, 885, DateTimeKind.Local).AddTicks(5301),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8118),
                            EmployeeId = 5,
                            HireDate = new DateTime(2023, 3, 23, 19, 7, 51, 791, DateTimeKind.Local).AddTicks(6698),
                            PhoneNumber = "+90-230-023-3-273",
                            Salary = 44531.43m,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            Address = "Gül Sokak 78a, Hakkari, Gabon",
                            BirthDate = new DateTime(1994, 7, 9, 21, 23, 12, 510, DateTimeKind.Local).AddTicks(6257),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8228),
                            EmployeeId = 6,
                            HireDate = new DateTime(2022, 9, 3, 5, 20, 15, 3, DateTimeKind.Local).AddTicks(4845),
                            PhoneNumber = "+90-996-744-75-91",
                            Salary = 25619.64m,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            Address = "Güven Yaka Sokak 5, Batman, Liechtenstein",
                            BirthDate = new DateTime(1993, 11, 3, 17, 20, 59, 297, DateTimeKind.Local).AddTicks(2009),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8318),
                            EmployeeId = 7,
                            HireDate = new DateTime(2023, 3, 26, 0, 52, 52, 156, DateTimeKind.Local).AddTicks(8519),
                            PhoneNumber = "+90-426-810-3-914",
                            Salary = 20631.83m,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            Address = "Gül Sokak 92a, Tekirdağ, Tonga",
                            BirthDate = new DateTime(1967, 9, 18, 13, 27, 20, 53, DateTimeKind.Local).AddTicks(4299),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8375),
                            EmployeeId = 8,
                            HireDate = new DateTime(2018, 1, 5, 10, 0, 28, 221, DateTimeKind.Local).AddTicks(5007),
                            PhoneNumber = "+90-813-064-84-32",
                            Salary = 37099.68m,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            Address = "Nalbant Sokak 74a, Aksaray, Brezilya",
                            BirthDate = new DateTime(1971, 5, 9, 10, 41, 37, 383, DateTimeKind.Local).AddTicks(3558),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8464),
                            EmployeeId = 9,
                            HireDate = new DateTime(2017, 11, 17, 0, 39, 58, 529, DateTimeKind.Local).AddTicks(8720),
                            PhoneNumber = "+90-771-930-75-80",
                            Salary = 32302.22m,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            Address = "Harman Altı Sokak 981, Bitlis, Portekiz",
                            BirthDate = new DateTime(1988, 8, 28, 11, 38, 59, 321, DateTimeKind.Local).AddTicks(9124),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8555),
                            EmployeeId = 10,
                            HireDate = new DateTime(2015, 9, 29, 15, 16, 59, 597, DateTimeKind.Local).AddTicks(2028),
                            PhoneNumber = "+90-064-287-63-30",
                            Salary = 35977.86m,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            Address = "Kaldırım Sokak 978, Kayseri, Afganistan",
                            BirthDate = new DateTime(1995, 2, 7, 23, 16, 32, 377, DateTimeKind.Local).AddTicks(9840),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8616),
                            EmployeeId = 11,
                            HireDate = new DateTime(2022, 4, 1, 9, 55, 57, 690, DateTimeKind.Local).AddTicks(9160),
                            PhoneNumber = "+90-914-841-59-23",
                            Salary = 31958.87m,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            Address = "İsmet Paşa Caddesi 43c, Düzce, Romanya",
                            BirthDate = new DateTime(1969, 4, 24, 13, 5, 39, 397, DateTimeKind.Local).AddTicks(2366),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8704),
                            EmployeeId = 12,
                            HireDate = new DateTime(2023, 12, 2, 11, 50, 2, 672, DateTimeKind.Local).AddTicks(3908),
                            PhoneNumber = "+90-395-770-8-200",
                            Salary = 24551.47m,
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            Address = "Sağlık Sokak 78b, Zonguldak, Ruanda",
                            BirthDate = new DateTime(1986, 1, 11, 6, 5, 43, 564, DateTimeKind.Local).AddTicks(9699),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8787),
                            EmployeeId = 13,
                            HireDate = new DateTime(2019, 1, 12, 2, 57, 41, 316, DateTimeKind.Local).AddTicks(5130),
                            PhoneNumber = "+90-951-094-53-08",
                            Salary = 32829.77m,
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            Address = "Sağlık Sokak 10a, Tekirdağ, Ekvator",
                            BirthDate = new DateTime(1983, 8, 7, 1, 52, 42, 802, DateTimeKind.Local).AddTicks(4655),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8858),
                            EmployeeId = 14,
                            HireDate = new DateTime(2020, 3, 19, 16, 43, 45, 770, DateTimeKind.Local).AddTicks(6081),
                            PhoneNumber = "+90-996-902-18-17",
                            Salary = 18009.27m,
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            Address = "Namık Kemal Caddesi 7, Bingöl, İsrail",
                            BirthDate = new DateTime(1970, 9, 23, 18, 19, 18, 273, DateTimeKind.Local).AddTicks(1006),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(8912),
                            EmployeeId = 15,
                            HireDate = new DateTime(2023, 4, 18, 17, 22, 15, 809, DateTimeKind.Local).AddTicks(7553),
                            PhoneNumber = "+90-069-651-98-28",
                            Salary = 40807.55m,
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            Address = "Kaldırım Sokak 60a, Muğla, Turks ve Caicos Adaları, İngiltere",
                            BirthDate = new DateTime(1999, 12, 19, 4, 15, 18, 191, DateTimeKind.Local).AddTicks(7290),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9008),
                            EmployeeId = 16,
                            HireDate = new DateTime(2014, 9, 13, 18, 13, 47, 983, DateTimeKind.Local).AddTicks(3985),
                            PhoneNumber = "+90-637-454-26-03",
                            Salary = 45332.69m,
                            Status = 1
                        },
                        new
                        {
                            Id = 17,
                            Address = "Namık Kemal Caddesi 3, Bayburt, Laos",
                            BirthDate = new DateTime(1983, 11, 11, 14, 31, 15, 744, DateTimeKind.Local).AddTicks(3107),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9106),
                            EmployeeId = 17,
                            HireDate = new DateTime(2014, 6, 6, 9, 53, 13, 547, DateTimeKind.Local).AddTicks(6665),
                            PhoneNumber = "+90-039-818-4-645",
                            Salary = 43862.96m,
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            Address = "Nalbant Sokak 87, Karabük, Katar",
                            BirthDate = new DateTime(1972, 9, 15, 10, 18, 24, 702, DateTimeKind.Local).AddTicks(3653),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9189),
                            EmployeeId = 18,
                            HireDate = new DateTime(2020, 12, 15, 2, 58, 55, 267, DateTimeKind.Local).AddTicks(2564),
                            PhoneNumber = "+90-284-261-94-96",
                            Salary = 42567.00m,
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            Address = "Nalbant Sokak 39a, Bartın, Cibuti",
                            BirthDate = new DateTime(2006, 7, 24, 15, 44, 26, 874, DateTimeKind.Local).AddTicks(4186),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9241),
                            EmployeeId = 19,
                            HireDate = new DateTime(2023, 5, 15, 17, 13, 11, 247, DateTimeKind.Local).AddTicks(8714),
                            PhoneNumber = "+90-607-333-9-528",
                            Salary = 40285.49m,
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            Address = "Namık Kemal Caddesi 40b, Siirt, Arjantin",
                            BirthDate = new DateTime(1983, 7, 14, 10, 46, 52, 363, DateTimeKind.Local).AddTicks(7799),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9330),
                            EmployeeId = 20,
                            HireDate = new DateTime(2023, 8, 12, 13, 17, 24, 788, DateTimeKind.Local).AddTicks(205),
                            PhoneNumber = "+90-209-170-9-460",
                            Salary = 44778.97m,
                            Status = 1
                        },
                        new
                        {
                            Id = 21,
                            Address = "Ülkü Sokak 50b, Kırşehir, Gürcistan H",
                            BirthDate = new DateTime(1995, 11, 27, 1, 7, 10, 96, DateTimeKind.Local).AddTicks(6084),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9412),
                            EmployeeId = 21,
                            HireDate = new DateTime(2014, 12, 31, 22, 0, 12, 320, DateTimeKind.Local).AddTicks(4469),
                            PhoneNumber = "+90-071-824-0-834",
                            Salary = 36916.08m,
                            Status = 1
                        },
                        new
                        {
                            Id = 22,
                            Address = "Menekşe Sokak 011, Çankırı, Solomon Adaları",
                            BirthDate = new DateTime(2001, 7, 28, 7, 40, 1, 281, DateTimeKind.Local).AddTicks(7552),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9500),
                            EmployeeId = 22,
                            HireDate = new DateTime(2019, 2, 15, 8, 35, 0, 51, DateTimeKind.Local).AddTicks(6995),
                            PhoneNumber = "+90-321-837-3-485",
                            Salary = 39555.12m,
                            Status = 1
                        },
                        new
                        {
                            Id = 23,
                            Address = "Sağlık Sokak 318, Muş, Kosta Rika",
                            BirthDate = new DateTime(1976, 7, 10, 19, 24, 8, 745, DateTimeKind.Local).AddTicks(1286),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9556),
                            EmployeeId = 23,
                            HireDate = new DateTime(2017, 12, 11, 20, 36, 13, 920, DateTimeKind.Local).AddTicks(911),
                            PhoneNumber = "+90-326-930-9-695",
                            Salary = 31438.83m,
                            Status = 1
                        },
                        new
                        {
                            Id = 24,
                            Address = "Bandak Sokak 761, Sinop, Cibuti",
                            BirthDate = new DateTime(2001, 5, 25, 7, 20, 19, 183, DateTimeKind.Local).AddTicks(7238),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9636),
                            EmployeeId = 24,
                            HireDate = new DateTime(2017, 8, 23, 13, 17, 19, 37, DateTimeKind.Local).AddTicks(2607),
                            PhoneNumber = "+90-627-977-6-232",
                            Salary = 19969.18m,
                            Status = 1
                        },
                        new
                        {
                            Id = 25,
                            Address = "Kekeçoğlu Sokak 71b, Gaziantep, Tonga",
                            BirthDate = new DateTime(1989, 5, 13, 10, 2, 40, 436, DateTimeKind.Local).AddTicks(1543),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9710),
                            EmployeeId = 25,
                            HireDate = new DateTime(2015, 5, 20, 8, 15, 6, 887, DateTimeKind.Local).AddTicks(6014),
                            PhoneNumber = "+90-909-699-9-783",
                            Salary = 44689.18m,
                            Status = 1
                        },
                        new
                        {
                            Id = 26,
                            Address = "Kocatepe Caddesi 19c, Tunceli, Vallis ve Futuna, Fransa",
                            BirthDate = new DateTime(1994, 11, 1, 9, 31, 57, 345, DateTimeKind.Local).AddTicks(8381),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9799),
                            EmployeeId = 26,
                            HireDate = new DateTime(2022, 10, 4, 17, 56, 54, 541, DateTimeKind.Local).AddTicks(8811),
                            PhoneNumber = "+90-258-027-07-57",
                            Salary = 34004.52m,
                            Status = 1
                        },
                        new
                        {
                            Id = 27,
                            Address = "Kerimoğlu Sokak 9, Tokat, Mikronezya",
                            BirthDate = new DateTime(1981, 6, 6, 1, 8, 3, 928, DateTimeKind.Local).AddTicks(3087),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9864),
                            EmployeeId = 27,
                            HireDate = new DateTime(2015, 12, 3, 7, 45, 41, 960, DateTimeKind.Local).AddTicks(5629),
                            PhoneNumber = "+90-564-371-8-986",
                            Salary = 45550.95m,
                            Status = 1
                        },
                        new
                        {
                            Id = 28,
                            Address = "Menekşe Sokak 03b, Yalova, Solomon Adaları",
                            BirthDate = new DateTime(1980, 12, 10, 13, 17, 19, 733, DateTimeKind.Local).AddTicks(879),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 519, DateTimeKind.Local).AddTicks(9963),
                            EmployeeId = 28,
                            HireDate = new DateTime(2019, 6, 28, 6, 21, 40, 788, DateTimeKind.Local).AddTicks(1061),
                            PhoneNumber = "+90-675-605-9-981",
                            Salary = 30801.90m,
                            Status = 1
                        },
                        new
                        {
                            Id = 29,
                            Address = "Dağınık Evler Sokak 14a, Kayseri, Makau (Makao)",
                            BirthDate = new DateTime(1967, 8, 21, 0, 4, 45, 704, DateTimeKind.Local).AddTicks(134),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(47),
                            EmployeeId = 29,
                            HireDate = new DateTime(2023, 6, 15, 10, 45, 31, 568, DateTimeKind.Local).AddTicks(4669),
                            PhoneNumber = "+90-169-022-85-55",
                            Salary = 15225.80m,
                            Status = 1
                        },
                        new
                        {
                            Id = 30,
                            Address = "Okul Sokak 94b, Sinop, Güney Georgia ve Güney Sandviç Adaları, İngiltere",
                            BirthDate = new DateTime(1987, 3, 2, 5, 25, 16, 818, DateTimeKind.Local).AddTicks(8464),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(135),
                            EmployeeId = 30,
                            HireDate = new DateTime(2014, 4, 6, 6, 29, 9, 456, DateTimeKind.Local).AddTicks(9842),
                            PhoneNumber = "+90-402-128-29-06",
                            Salary = 17627.83m,
                            Status = 1
                        },
                        new
                        {
                            Id = 31,
                            Address = "Namık Kemal Caddesi 55b, Rize, Haiti",
                            BirthDate = new DateTime(1972, 11, 6, 3, 7, 28, 478, DateTimeKind.Local).AddTicks(1267),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(187),
                            EmployeeId = 31,
                            HireDate = new DateTime(2022, 3, 1, 9, 20, 19, 939, DateTimeKind.Local).AddTicks(362),
                            PhoneNumber = "+90-529-474-37-07",
                            Salary = 20164.81m,
                            Status = 1
                        },
                        new
                        {
                            Id = 32,
                            Address = "Kaldırım Sokak 95c, Erzincan, Palmyra Atoll, Amerika",
                            BirthDate = new DateTime(1967, 11, 10, 1, 24, 0, 434, DateTimeKind.Local).AddTicks(2248),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(274),
                            EmployeeId = 32,
                            HireDate = new DateTime(2015, 2, 6, 16, 42, 51, 762, DateTimeKind.Local).AddTicks(413),
                            PhoneNumber = "+90-884-571-32-99",
                            Salary = 36038.69m,
                            Status = 1
                        },
                        new
                        {
                            Id = 33,
                            Address = "Dağınık Evler Sokak 44, Kastamonu, İsrail",
                            BirthDate = new DateTime(1999, 5, 9, 7, 8, 28, 535, DateTimeKind.Local).AddTicks(1426),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(363),
                            EmployeeId = 33,
                            HireDate = new DateTime(2017, 8, 28, 17, 7, 12, 943, DateTimeKind.Local).AddTicks(6481),
                            PhoneNumber = "+90-737-935-0-541",
                            Salary = 29016.39m,
                            Status = 1
                        },
                        new
                        {
                            Id = 34,
                            Address = "Menekşe Sokak 69a, Hakkari, Estonya",
                            BirthDate = new DateTime(1996, 10, 15, 11, 5, 7, 817, DateTimeKind.Local).AddTicks(2008),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(456),
                            EmployeeId = 34,
                            HireDate = new DateTime(2017, 4, 13, 23, 40, 6, 722, DateTimeKind.Local).AddTicks(2737),
                            PhoneNumber = "+90-296-594-4-410",
                            Salary = 46636.98m,
                            Status = 1
                        },
                        new
                        {
                            Id = 35,
                            Address = "Sarıkaya Caddesi 31a, K.maraş, Fas",
                            BirthDate = new DateTime(2004, 4, 19, 21, 57, 14, 15, DateTimeKind.Local).AddTicks(7922),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(510),
                            EmployeeId = 35,
                            HireDate = new DateTime(2016, 3, 15, 21, 3, 19, 861, DateTimeKind.Local).AddTicks(2425),
                            PhoneNumber = "+90-895-069-4-247",
                            Salary = 19848.28m,
                            Status = 1
                        },
                        new
                        {
                            Id = 36,
                            Address = "Kaldırım Sokak 76a, Edirne, Botswana",
                            BirthDate = new DateTime(1977, 6, 22, 7, 22, 44, 489, DateTimeKind.Local).AddTicks(7440),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(579),
                            EmployeeId = 36,
                            HireDate = new DateTime(2021, 11, 13, 23, 27, 26, 550, DateTimeKind.Local).AddTicks(4020),
                            PhoneNumber = "+90-559-287-72-38",
                            Salary = 49623.25m,
                            Status = 1
                        },
                        new
                        {
                            Id = 37,
                            Address = "30 Ağustos Caddesi 000, Zonguldak, Togo",
                            BirthDate = new DateTime(1976, 11, 26, 16, 9, 25, 318, DateTimeKind.Local).AddTicks(1524),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(666),
                            EmployeeId = 37,
                            HireDate = new DateTime(2014, 12, 20, 14, 43, 48, 548, DateTimeKind.Local).AddTicks(12),
                            PhoneNumber = "+90-475-406-5-917",
                            Salary = 49481.60m,
                            Status = 1
                        },
                        new
                        {
                            Id = 38,
                            Address = "Okul Sokak 88b, Nevşehir, Letonya",
                            BirthDate = new DateTime(1990, 4, 2, 19, 52, 1, 17, DateTimeKind.Local).AddTicks(873),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(757),
                            EmployeeId = 38,
                            HireDate = new DateTime(2023, 11, 11, 12, 3, 34, 114, DateTimeKind.Local).AddTicks(109),
                            PhoneNumber = "+90-766-550-2-569",
                            Salary = 18849.82m,
                            Status = 1
                        },
                        new
                        {
                            Id = 39,
                            Address = "Fatih Sokak  6, Düzce, Sri Lanka",
                            BirthDate = new DateTime(1981, 3, 21, 3, 53, 40, 822, DateTimeKind.Local).AddTicks(3079),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(810),
                            EmployeeId = 39,
                            HireDate = new DateTime(2023, 9, 3, 7, 16, 10, 323, DateTimeKind.Local).AddTicks(1580),
                            PhoneNumber = "+90-722-427-5-508",
                            Salary = 25346.89m,
                            Status = 1
                        },
                        new
                        {
                            Id = 40,
                            Address = "Kerimoğlu Sokak 70b, Bolu, Kosta Rika",
                            BirthDate = new DateTime(2001, 12, 29, 12, 39, 3, 799, DateTimeKind.Local).AddTicks(5819),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(891),
                            EmployeeId = 40,
                            HireDate = new DateTime(2021, 4, 4, 5, 4, 37, 743, DateTimeKind.Local).AddTicks(750),
                            PhoneNumber = "+90-102-373-72-10",
                            Salary = 21826.88m,
                            Status = 1
                        },
                        new
                        {
                            Id = 41,
                            Address = "Bahçe Sokak 89b, Karaman, Romanya",
                            BirthDate = new DateTime(1983, 10, 21, 14, 35, 29, 703, DateTimeKind.Local).AddTicks(9907),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(973),
                            EmployeeId = 41,
                            HireDate = new DateTime(2020, 7, 8, 6, 1, 19, 635, DateTimeKind.Local).AddTicks(2568),
                            PhoneNumber = "+90-523-818-00-29",
                            Salary = 17172.59m,
                            Status = 1
                        },
                        new
                        {
                            Id = 42,
                            Address = "Kerimoğlu Sokak 992, Kars, Amerika Birleşik Devletleri",
                            BirthDate = new DateTime(1969, 1, 26, 8, 51, 40, 243, DateTimeKind.Local).AddTicks(9417),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(1025),
                            EmployeeId = 42,
                            HireDate = new DateTime(2016, 11, 16, 9, 14, 52, 979, DateTimeKind.Local).AddTicks(9718),
                            PhoneNumber = "+90-706-042-27-93",
                            Salary = 33580.17m,
                            Status = 1
                        },
                        new
                        {
                            Id = 43,
                            Address = "Yunus Emre Sokak 74c, Gaziantep, Zimbabve",
                            BirthDate = new DateTime(1994, 3, 17, 20, 16, 21, 483, DateTimeKind.Local).AddTicks(2279),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(1111),
                            EmployeeId = 43,
                            HireDate = new DateTime(2022, 3, 24, 10, 48, 50, 646, DateTimeKind.Local).AddTicks(2525),
                            PhoneNumber = "+90-205-006-47-11",
                            Salary = 37186.15m,
                            Status = 1
                        },
                        new
                        {
                            Id = 44,
                            Address = "Lütfi Karadirek Caddesi 003, Antalya, Johnston Atoll, Amerika",
                            BirthDate = new DateTime(1987, 7, 10, 20, 11, 43, 64, DateTimeKind.Local).AddTicks(1852),
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 520, DateTimeKind.Local).AddTicks(1203),
                            EmployeeId = 44,
                            HireDate = new DateTime(2014, 10, 20, 13, 54, 0, 643, DateTimeKind.Local).AddTicks(8786),
                            PhoneNumber = "+90-126-099-1-816",
                            Salary = 29693.47m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.Entities.Models.EmployeeShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("EmployeeId", "ShiftId")
                        .IsUnique();

                    b.ToTable("EmployeeShifts");
                });

            modelBuilder.Entity("Project.Entities.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Project.Entities.Models.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("money");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Project.Entities.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("money");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Project.Entities.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PackageId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Project.Entities.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("money");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomStatus")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 518, DateTimeKind.Local).AddTicks(4665),
                            Floor = 1,
                            PricePerNight = 190.30m,
                            RoomNumber = "198",
                            RoomStatus = 3,
                            RoomTypeId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 518, DateTimeKind.Local).AddTicks(4679),
                            Floor = 1,
                            PricePerNight = 174.43m,
                            RoomNumber = "162",
                            RoomStatus = 1,
                            RoomTypeId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 518, DateTimeKind.Local).AddTicks(4684),
                            Floor = 1,
                            PricePerNight = 183.39m,
                            RoomNumber = "126",
                            RoomStatus = 3,
                            RoomTypeId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 518, DateTimeKind.Local).AddTicks(4688),
                            Floor = 1,
                            PricePerNight = 64.06m,
                            RoomNumber = "151",
                            RoomStatus = 1,
                            RoomTypeId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 518, DateTimeKind.Local).AddTicks(4691),
                            Floor = 1,
                            PricePerNight = 141.01m,
                            RoomNumber = "152",
                            RoomStatus = 1,
                            RoomTypeId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 518, DateTimeKind.Local).AddTicks(4696),
                            Floor = 1,
                            PricePerNight = 147.25m,
                            RoomNumber = "134",
                            RoomStatus = 3,
                            RoomTypeId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 518, DateTimeKind.Local).AddTicks(4700),
                            Floor = 1,
                            PricePerNight = 83.76m,
                            RoomNumber = "121",
                            RoomStatus = 2,
                            RoomTypeId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 518, DateTimeKind.Local).AddTicks(4704),
                            Floor = 1,
                            PricePerNight = 169.42m,
                            RoomNumber = "180",
                            RoomStatus = 3,
                            RoomTypeId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 518, DateTimeKind.Local).AddTicks(4707),
                            Floor = 1,
                            PricePerNight = 69.01m,
                            RoomNumber = "176",
                            RoomStatus = 1,
                            RoomTypeId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 518, DateTimeKind.Local).AddTicks(4711),
                            Floor = 1,
                            PricePerNight = 169.75m,
                            RoomNumber = "188",
                            RoomStatus = 2,
                            RoomTypeId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 2,
                            PricePerNight = 175.47m,
                            RoomNumber = "282",
                            RoomStatus = 1,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 2,
                            PricePerNight = 246.58m,
                            RoomNumber = "273",
                            RoomStatus = 3,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 2,
                            PricePerNight = 150.48m,
                            RoomNumber = "204",
                            RoomStatus = 3,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 2,
                            PricePerNight = 176.40m,
                            RoomNumber = "288",
                            RoomStatus = 3,
                            RoomTypeId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 2,
                            PricePerNight = 129.71m,
                            RoomNumber = "236",
                            RoomStatus = 2,
                            RoomTypeId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 2,
                            PricePerNight = 159.92m,
                            RoomNumber = "247",
                            RoomStatus = 3,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 2,
                            PricePerNight = 112.54m,
                            RoomNumber = "262",
                            RoomStatus = 1,
                            RoomTypeId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 2,
                            PricePerNight = 146.97m,
                            RoomNumber = "296",
                            RoomStatus = 3,
                            RoomTypeId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 2,
                            PricePerNight = 149.10m,
                            RoomNumber = "239",
                            RoomStatus = 1,
                            RoomTypeId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 2,
                            PricePerNight = 155.02m,
                            RoomNumber = "233",
                            RoomStatus = 2,
                            RoomTypeId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 3,
                            PricePerNight = 236.62m,
                            RoomNumber = "324",
                            RoomStatus = 1,
                            RoomTypeId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 3,
                            PricePerNight = 289.26m,
                            RoomNumber = "351",
                            RoomStatus = 3,
                            RoomTypeId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 3,
                            PricePerNight = 199.27m,
                            RoomNumber = "385",
                            RoomStatus = 3,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 3,
                            PricePerNight = 181.47m,
                            RoomNumber = "305",
                            RoomStatus = 2,
                            RoomTypeId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 3,
                            PricePerNight = 288.51m,
                            RoomNumber = "303",
                            RoomStatus = 1,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 3,
                            PricePerNight = 260.04m,
                            RoomNumber = "377",
                            RoomStatus = 2,
                            RoomTypeId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 3,
                            PricePerNight = 269.33m,
                            RoomNumber = "313",
                            RoomStatus = 3,
                            RoomTypeId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 3,
                            PricePerNight = 216.37m,
                            RoomNumber = "380",
                            RoomStatus = 1,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 3,
                            PricePerNight = 276.71m,
                            RoomNumber = "369",
                            RoomStatus = 2,
                            RoomTypeId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 3,
                            PricePerNight = 272.42m,
                            RoomNumber = "317",
                            RoomStatus = 1,
                            RoomTypeId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 261.70m,
                            RoomNumber = "482",
                            RoomStatus = 2,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 416.96m,
                            RoomNumber = "416",
                            RoomStatus = 2,
                            RoomTypeId = 4,
                            Status = 0
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 428.27m,
                            RoomNumber = "413",
                            RoomStatus = 1,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 308.31m,
                            RoomNumber = "407",
                            RoomStatus = 2,
                            RoomTypeId = 4,
                            Status = 0
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 420.35m,
                            RoomNumber = "472",
                            RoomStatus = 2,
                            RoomTypeId = 4,
                            Status = 0
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 256.50m,
                            RoomNumber = "437",
                            RoomStatus = 2,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 401.14m,
                            RoomNumber = "469",
                            RoomStatus = 2,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 308.74m,
                            RoomNumber = "471",
                            RoomStatus = 2,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 452.53m,
                            RoomNumber = "493",
                            RoomStatus = 1,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 497.70m,
                            RoomNumber = "454",
                            RoomStatus = 1,
                            RoomTypeId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Floor = 4,
                            PricePerNight = 1000m,
                            RoomNumber = "500",
                            RoomStatus = 1,
                            RoomTypeId = 5,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Project.Entities.Models.RoomFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("RoomId", "FeatureId")
                        .IsUnique();

                    b.ToTable("RoomFeatures");
                });

            modelBuilder.Entity("Project.Entities.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 516, DateTimeKind.Local).AddTicks(4156),
                            Description = "1 tek kişilik yatak",
                            Name = "Tek Kişilik",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 516, DateTimeKind.Local).AddTicks(4175),
                            Description = "1 büyük yatak",
                            Name = "Çift Kişilik (Duble)",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 516, DateTimeKind.Local).AddTicks(4177),
                            Description = "3 tek kişilik yatak",
                            Name = "Üç Kişilik",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 516, DateTimeKind.Local).AddTicks(4178),
                            Description = "1 büyük + 2 tek kişilik yatak",
                            Name = "Dört Kişilik",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 2, 18, 23, 20, 10, 516, DateTimeKind.Local).AddTicks(4179),
                            Description = "Lüks konaklama, özel hizmetler",
                            Name = "Kral Dairesi",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.Entities.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Project.Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Project.Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Project.Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Entities.Models.AppUserProfile", b =>
                {
                    b.HasOne("Project.Entities.Models.AppUser", "AppUser")
                        .WithOne("AppUserProfile")
                        .HasForeignKey("Project.Entities.Models.AppUserProfile", "AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Entities.Models.Customer", b =>
                {
                    b.HasOne("Project.Entities.Models.AppUser", "AppUser")
                        .WithMany("Customers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Entities.Models.CustomerDetail", b =>
                {
                    b.HasOne("Project.Entities.Models.Customer", "Customer")
                        .WithOne("CustomerDetail")
                        .HasForeignKey("Project.Entities.Models.CustomerDetail", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Project.Entities.Models.EmployeeDetail", b =>
                {
                    b.HasOne("Project.Entities.Models.Employee", "Employee")
                        .WithOne("EmployeeDetail")
                        .HasForeignKey("Project.Entities.Models.EmployeeDetail", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Project.Entities.Models.EmployeeShift", b =>
                {
                    b.HasOne("Project.Entities.Models.Employee", "Employee")
                        .WithMany("EmployeeShifts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.Models.Shift", "Shift")
                        .WithMany("EmployeeShifts")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("Project.Entities.Models.Payment", b =>
                {
                    b.HasOne("Project.Entities.Models.Reservation", "Reservation")
                        .WithOne("Payment")
                        .HasForeignKey("Project.Entities.Models.Payment", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Project.Entities.Models.Reservation", b =>
                {
                    b.HasOne("Project.Entities.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Project.Entities.Models.Employee", "Employee")
                        .WithMany("ManagedReservations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.Models.Package", "Package")
                        .WithMany("Reservations")
                        .HasForeignKey("PackageId");

                    b.HasOne("Project.Entities.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Package");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Project.Entities.Models.Room", b =>
                {
                    b.HasOne("Project.Entities.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Project.Entities.Models.RoomFeature", b =>
                {
                    b.HasOne("Project.Entities.Models.Feature", "Feature")
                        .WithMany("RoomFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.Models.Room", "Room")
                        .WithMany("RoomFeatures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Project.Entities.Models.AppUser", b =>
                {
                    b.Navigation("AppUserProfile")
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Project.Entities.Models.Customer", b =>
                {
                    b.Navigation("CustomerDetail")
                        .IsRequired();

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Project.Entities.Models.Employee", b =>
                {
                    b.Navigation("EmployeeDetail")
                        .IsRequired();

                    b.Navigation("EmployeeShifts");

                    b.Navigation("ManagedReservations");
                });

            modelBuilder.Entity("Project.Entities.Models.Feature", b =>
                {
                    b.Navigation("RoomFeatures");
                });

            modelBuilder.Entity("Project.Entities.Models.Package", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Project.Entities.Models.Reservation", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Entities.Models.Room", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("RoomFeatures");
                });

            modelBuilder.Entity("Project.Entities.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Project.Entities.Models.Shift", b =>
                {
                    b.Navigation("EmployeeShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
